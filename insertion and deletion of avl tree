class Node
{
  int key, height;
  Node left, right;
    Node (int d)
  {
    key = d;
    height = 1;
  }
}
class Main
{
  Node root;
  int height (Node N)
  {
    if (N == null)
      return 0;
    return N.height;
  }
  int max (int a, int b)
  {
    return (a > b) ? a : b;
  }
  Node rightrotate (Node y)
  {
    Node x = y.left;
    Node T2 = x.right;

    x.right = y;
    y.left = T2;

  y.height = max(height(y.left), height(y.right)) + 1;
x.height = max(height(x.left), height(x.right)) + 1;
				      return x;
      
  }
				    Node leftrotate (Node x)
				    {
				    Node y = x.right;
				    Node T2 = y.left;
				    y.left = x;
				    x.right = T2;
				    x.height =max (height (x.left), height (x.right)) + 1;
					 y.height = max (height (y.left),height (y.right)) + 1; 
					      return y;
				        
				    }
					      int getbalance(Node N)
					      {
					      if (N == null)
					      return 0;
					      return height (N.left) - height (N.right);
					          
					      }
					      Node insert (Node node,int key)
					      {
					      if (node == null)
					      return (new Node (key));
					      if (key < node.key)
					      node.left = insert (node.left, key);
					      else
					      if (key > node.key)
					      node.right = insert (node.right, key);
					      else
					      return node;
					      node.height =1 + max(height(node.left),height(node.right));
						   int balance = getbalance(node);
						   if (balance > 1 && key < node.left. key) 
						   return rightrotate(node);
						   if (balance < -1 && key > node.right.key) 
						   return leftrotate (node);
						   if (balance > 1 && key > node.left.key)
						   {
						   node.left = leftrotate(node.left);
						   return rightrotate(node);
						       
						   }
	 if (balance < -1 && key < node.right.key)
						   {
	node.right = rightrotate (node.right);
						   return leftrotate (node);
						       
						   }
						   return node;}
						   Node min(Node node){
						     Node current=node;						   // while(current.left!=null)
						   current=current.left;
						   return current;
						   }
						   Node delete(Node root,int key){
						       if (root == null)
					      return root;
					      if (key < root.key)
					      root.left = delete(root.left, key);
					      else
					      if (key > root.key)
					      root.right = delete(root.right, key);
					      else
					      {
					          if((root.left==null || (root.right==null))
					          {
					              Node temp=null;
					              if (temp==root.left);
					              temp=root.right;
					              else
					              temp=root.left;
					              if(temp==null){
					                  temp=root;
					                  root=null;
					              }
					              else
					              root=temp;
					          }
					          else{
					             Node temp=min(root.right);
					             root.key=temp.key;
					             root.right=delete(root.right,temp.key);
					          }
					      }
					      if(root==null)
					      return root;
					      root.height =1 + max(height(root.left),height(root.right));
						   int balance = getbalance(node);
						   if (balance > 1 && getbalance(root.left)>=0) 
						   return rightrotate(root);
						   if (balance < -1 && getbalance(root.right)<=0) 
						   return leftrotate (root);
						   if (balance > 1 && getbalance(root.left)<0)
						   {
						   root.left = leftrotate(root.left);
						   return rightrotate(root);
						   }
						   if (balance < -1 && getbalance(root.right)>0)
						   {
	root.right = rightrotate (root.right);
						   return leftrotate (root);
						       
						   }
						   return root;
						   }
						   void preorder (Node node)
						   {
						   if (node != null)
						   {
						   System.out.println (node.key +" ");
						   preorder (node.left);
						   preorder (node.right);}
						   }


						   public static void
						   main (String[]args)
						   {
						   Main tree = new Main ();
						   tree.root =tree.insert (tree.root, 9);
						   tree.root =tree.insert (tree.root, 5);
						   tree.root =tree.insert (tree.root, 10);
						   tree.root =tree.insert (tree.root, 0);
						   tree.root =tree.insert (tree.root, 6);
						   tree.root =tree.insert (tree.root, 11);
						   tree.root =tree.insert (tree.root, -1);
						   tree.root = tree.insert (tree.root,1);
						       	tree.root=tree.insert(tree.root,2);
						       	tree.preorder(tree.root);
						       	tree.root=tree.delete(tree.root,10);
						       	tree.preorder(tree.root);
						   }
						   }
